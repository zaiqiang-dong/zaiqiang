<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>170</x>
      <y>60</y>
      <w>400</w>
      <h>580</h>
    </coordinates>
    <panel_attributes>
*struct trace_array trace_array*
--

struct list_head       list_head
struct list_head       list
char *                 name
struct trace_buffer    trace_buffer
struct trace_pid_list  trace_pid_list
struct trace_pid_list  __rcu
int                    max_lock
int                    buffer_disabled
int                    stop_count
int                    clock_id
int                    nr_topts
struct tracer          tracer
struct tracer *        current_trace
unsigned int           trace_flags
unsigned char          trace_flags_index
unsigned int           flags
int                    start_lock
struct dentry          dentry
struct dentry *        dir
struct dentry *        options
struct dentry *        percpu_dir
struct dentry *        event_dir
struct trace_options   trace_options
struct trace_options * topts
struct list_head       systems
struct list_head       events
int                    tracing_cpumask
int                    ref
struct ftrace_ops      ftrace_ops
struct ftrace_ops *    ops
int                    function_enabled

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>750</x>
      <y>160</y>
      <w>400</w>
      <h>205</h>
    </coordinates>
    <panel_attributes>
*struct trace_buffer trace_buffer*
--

struct trace_array *   tr
struct ring_buffer     ring_buffer
struct ring_buffer *   buffer
struct trace_array_cpu __percpu *data
int                    time_start
int                    cpu

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>950</x>
      <y>650</y>
      <w>400</w>
      <h>340</h>
    </coordinates>
    <panel_attributes>
*struct ring_buffer*
--

unsigned int                  flags
-
int                           cpus
int                           record_disabled
int                           resize_disabled
int                           cpumask
struct lock_class_key         lock_class_key
struct lock_class_key *       reader_lock_key
struct mutex                  mutex
struct mutex                  mutex
struct ring_buffer_per_cpu    ring_buffer_per_cpu
struct ring_buffer_per_cpu ** buffers
struct notifier_block         notifier_block
struct notifier_block         cpu_notify
int ((int *))(void)           u64
struct rb_irq_work            rb_irq_work
struct rb_irq_work            irq_work

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1760</x>
      <y>860</y>
      <w>400</w>
      <h>610</h>
    </coordinates>
    <panel_attributes>
*struct ring_buffer_per_cpu ring_buffer_per_cpu*
--

int                   cpu
int                   record_disabled
struct ring_buffer *  buffer
int                   reader_lock
int                   lock
struct lock_class_key lock_key
unsigned long         nr_pages
unsigned int          current_context
struct list_head *    pages
struct buffer_page    buffer_page
struct buffer_page *  head_page
struct buffer_page *  tail_page
struct buffer_page *  commit_page
struct buffer_page *  reader_page
unsigned long         lost_events
unsigned long         last_overrun
int                   entries_bytes
int                   entries
int                   overrun
int                   commit_overrun
int                   dropped_events
int                   committing
int                   commits
unsigned long         read
unsigned long         read_bytes
int                   write_stamp
int                   read_stamp
long                  nr_pages_to_update
struct list_head      new_pages
struct work_struct    work_struct
struct work_struct    update_pages_work
struct completion     completion
struct completion     update_done
struct rb_irq_work    irq_work

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>960</x>
      <y>1120</y>
      <w>400</w>
      <h>205</h>
    </coordinates>
    <panel_attributes>
*struct buffer_page *
--

struct list_head          list
int                       write
unsigned int              read
int                       entries
unsigned long             real_end
struct buffer_data_page * page

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>350</x>
      <y>1260</y>
      <w>400</w>
      <h>145</h>
    </coordinates>
    <panel_attributes>
*struct buffer_data_page *
--

int              time_stamp
int              commit
unsigned char [] data

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>110</x>
      <y>770</y>
      <w>400</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>
*struct ring_buffer_event ring_buffer_event*
--

int () kmemcheck_bitfield_begin
u32	type_len:5, time_delta:27;
int () kmemcheck_bitfield_end
int [] array

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1500</x>
      <y>200</y>
      <w>430</w>
      <h>400</h>
    </coordinates>
    <panel_attributes>struct trace_array_cpu 
--
	atomic_t		disabled;
	void			*buffer_page;	/* ring buffer spare */

	unsigned long     entries;
	unsigned long		saved_latency;
	unsigned long		critical_start;
	unsigned long		critical_end;
	unsigned long		critical_sequence;
	unsigned long		nice;
	unsigned long		policy;
	unsigned long		rt_priority;
	unsigned long		skipped_entries;
	cycle_t			preempt_timestamp;
	pid_t			pid;
	kuid_t			uid;
	char			comm[TASK_COMM_LEN];

	bool			ignore_pid;
#ifdef CONFIG_FUNCTION_TRACER
	bool			ftrace_ignore_pid;
#endif

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>560</x>
      <y>160</y>
      <w>210</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>190.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1140</x>
      <y>260</y>
      <w>380</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
m1=1..n</panel_attributes>
    <additional_attributes>360.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1140</x>
      <y>250</y>
      <w>100</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>80.0;400.0;80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>560</x>
      <y>70</y>
      <w>200</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;10.0;80.0;150.0;180.0;150.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1340</x>
      <y>870</y>
      <w>440</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
m1=1..n</panel_attributes>
    <additional_attributes>420.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1340</x>
      <y>850</y>
      <w>440</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>420.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1350</x>
      <y>1130</y>
      <w>430</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;410.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>740</x>
      <y>1270</y>
      <w>240</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;220.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>970</x>
      <y>1400</y>
      <w>400</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>
*struct buffer_page *
--

struct list_head          list
int                       write
unsigned int              read
int                       entries
unsigned long             real_end
struct buffer_data_page * page

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1360</x>
      <y>1050</y>
      <w>420</w>
      <h>400</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
m1=1..nr_pages</panel_attributes>
    <additional_attributes>10.0;370.0;330.0;370.0;330.0;10.0;400.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>360</x>
      <y>1530</y>
      <w>400</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>
*struct buffer_data_page *
--

int              time_stamp
int              commit
unsigned char [] data

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>750</x>
      <y>1540</y>
      <w>240</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;220.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>260</x>
      <y>1080</y>
      <w>1520</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
m1=1..n</panel_attributes>
    <additional_attributes>1500.0;10.0;10.0;10.0;10.0;340.0;710.0;340.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>240</x>
      <y>0</y>
      <w>140</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>global
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>330</x>
      <y>20</y>
      <w>30</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>50</x>
      <y>2090</y>
      <w>310</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>struct tracepoint
--
	const char *name;		/* Tracepoint name */
	struct static_key key;
	void (*regfunc)(void);
	void (*unregfunc)(void);
	struct tracepoint_func __rcu *funcs;

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>800</x>
      <y>2030</y>
      <w>470</w>
      <h>610</h>
    </coordinates>
    <panel_attributes>struct trace_event_call
--
	struct list_head	list;
	struct trace_event_class *class;
	union {
		char			*name;
		/* Set TRACE_EVENT_FL_TRACEPOINT flag when using "tp" */
		struct tracepoint	*tp;
	};
	struct trace_event	event;
	char			*print_fmt;
	struct event_filter	*filter;
	void			*mod;
	void			*data;
	/*
	 *   bit 0:		filter_active
	 *   bit 1:		allow trace by non root (cap any)
	 *   bit 2:		failed to apply filter
	 *   bit 3:		trace internal event (do not enable)
	 *   bit 4:		Event was enabled by module
	 *   bit 5:		use call filter rather than file filter
	 *   bit 6:		Event is a tracepoint
	 */
	int			flags; /* static flags of different events */

#ifdef CONFIG_PERF_EVENTS
	int				perf_refcount;
	struct hlist_head __percpu	*perf_events;
	struct bpf_prog			*prog;
	struct perf_event		*bpf_prog_owner;

	int	(*perf_perm)(struct trace_event_call *,
			     struct perf_event *);
#endif

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1430</x>
      <y>2160</y>
      <w>270</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>struct trace_event
--
	struct hlist_node		node;
	struct list_head		list;
	int				type;
	struct trace_event_functions	*funcs;

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1260</x>
      <y>2160</y>
      <w>190</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>170.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1850</x>
      <y>2230</y>
      <w>260</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>struct trace_event_functions
--
	trace_print_func	trace;
	trace_print_func	raw;
	trace_print_func	hex;
	trace_print_func	binary;

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1690</x>
      <y>2230</y>
      <w>180</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>160.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1430</x>
      <y>1920</y>
      <w>400</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>struct trace_event_class
--
	const char		*system;
	void			*probe;
#ifdef CONFIG_PERF_EVENTS
	void			*perf_probe;
#endif
	int			(*reg)(struct trace_event_call *event,
				       enum trace_reg type, void *data);
	int			(*define_fields)(struct trace_event_call *);
	struct list_head	*(*get_fields)(struct trace_event_call *);
	struct list_head	fields;
	int			(*raw_init)(struct trace_event_call *);

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1260</x>
      <y>2070</y>
      <w>190</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>170.0;10.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
